// src/types/blog.ts

// The User interface is no longer directly imported here as it's not consumed
// within this file's type definitions. User-related data is handled via strings (e.g., authorId)
// or within the AuthContext where the full User object is relevant.

// Define the shape of a Comment (consistent with backend)
export interface Comment {
    id: string; // Backend-generated ID (MongoDB _id)
    authorId: string;
    authorName: string;
    authorAvatar?: string;
    content: string;
    createdAt: Date; // Stored as ISO string on backend, converted to Date on frontend
    isAnonymous: boolean;
}

// Define the shape of a Blog post (consistent with backend)
export interface Blog {
    id: string; // Backend-generated ID (MongoDB _id)
    title: string;
    content: string;
    excerpt: string; // Generated by backend
    authorId: string;
    authorName: string; // Populated by backend from authorId
    authorAvatar?: string; // Populated by backend from authorId
    category: string;
    tags: string[];
    likes: string[]; // Array of user IDs who liked the post
    views: number;
    comments: Comment[];
    createdAt: Date; // Stored as ISO string on backend, converted to Date on frontend
    updatedAt: Date; // Stored as ISO string on backend, converted to Date on frontend
    isSpotlight: boolean;
    readTime: number; // Generated by backend
    thumbnailUrl?: string; // URL to the blog's thumbnail image
}

// Define the shape of the data submitted when creating or updating a blog
// This represents the payload sent from the frontend to the backend
export interface BlogData {
    title: string;
    content: string;
    category: string;
    tags: string[];
    isSpotlight: boolean;
    thumbnailUrl?: string;
    // excerpt and readTime are generated by the backend
    // authorId, authorName, authorAvatar are derived from the authenticated user on the backend
}

// Define props for the BlogEditor component
export interface BlogEditorProps {
    blogToEdit?: Blog; // Optional: if provided, the editor is in edit mode
    onSuccess: (id: string) => void; // Callback after successful creation or update
}

// Define sorting options for blog lists (these will be sent to backend as query params)
export type SortBy = 'recent' | 'oldest' | 'likes' | 'views';
export type SortOrder = 'asc' | 'desc';

// Define parameters for fetching blogs (sent to backend as query params)
export interface FetchBlogsParams {
    category?: string;
    tag?: string;
    authorId?: string;
    query?: string; // Search query
    sortBy?: SortBy;
    sortOrder?: SortOrder;
    isSpotlight?: boolean;
    page?: number; // For pagination, if implemented
    limit?: number; // For pagination, if implemented
}
